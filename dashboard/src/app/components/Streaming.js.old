//@flow

import React, { Component } from 'react';
import { Line } from 'react-chartjs-2';
import 'chartjs-plugin-streaming';
import Chart from 'chart.js';

var chartColors = {
	red: 'rgb(255, 99, 132)',
	orange: 'rgb(255, 159, 64)',
	yellow: 'rgb(255, 205, 86)',
	green: 'rgb(75, 192, 192)',
	blue: 'rgb(54, 162, 235)',
	purple: 'rgb(153, 102, 255)',
	grey: 'rgb(201, 203, 207)'
};

function randomScalingFactor() {
	// return (Math.random() > 0.5 ? 1.0 : -1.0) * Math.round(Math.random() * 100);
	return (Math.random() > 0.5 ? 1.0 : 0) * 100;

}

let moreData 

function onRefresh(chart) {
	chart.config.data.datasets.forEach(function(dataset) {



		dataset.data.push({
			x: Date.now(),
			y: randomScalingFactor()
		});
	});
}

type Props = {

}
var color = Chart.helpers.color;
let firstTime = false
// let topicName = 'images'
// var mqtt = require('mqtt')
// var client  = mqtt.connect('ws://sgdemo2.solace.com:6002')
let totalCount = 3


class Streaming extends Component<Props> {




  render() {

    // if (firstTime === false){
    //   console.log('First Time')
    //   // this.setupListener()
    //   firstTime = true

      
    // }



    return (
      <Line
        data={{
          datasets: [{
            label: 'Dataset 1 (linear interpolation)',
            backgroundColor: color(chartColors.red).alpha(0.5).rgbString(),
            borderColor: chartColors.red,
            fill: false,
            lineTension: 0,
            borderDash: [8, 4],
            data: []
          }, {
            label: 'Dataset 2 (cubic interpolation)',
            backgroundColor: color(chartColors.blue).alpha(0.5).rgbString(),
            borderColor: chartColors.blue,
            fill: false,
            cubicInterpolationMode: 'monotone',
            data: []
          }]        
        }}
        options={{
          scales: {
            xAxes: [{
              type: 'realtime',
              realtime: {
                duration: 20000,
                refresh: 1000,
                delay: 2000,
                onRefresh: onRefresh,
              }
            }]
          }
        }}
      />
    );
  }
}

export default Streaming;